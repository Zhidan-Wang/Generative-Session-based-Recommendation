# -*- coding: utf-8 -*-

import os
import random

import numpy as np

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.autograd import Variable

class Generator(nn.Module):
    """Generator """
    def __init__(self, num_emb, emb_dim, hidden_dim, device): # num_emb:token的个数;emb_dim:32;hidden_dim:32;use_cuda:False
        super(Generator, self).__init__()
        self.num_emb = num_emb      # token的个数
        self.emb_dim = emb_dim      # 32
        self.hidden_dim = hidden_dim    # 32
        self.device = device
        self.emb = nn.Embedding(num_emb, emb_dim, padding_idx=0)   # embbing层
        self.lstm = nn.LSTM(emb_dim, hidden_dim, batch_first=True)  # lstm层
        self.lin = nn.Linear(hidden_dim, num_emb)   # 线性层
        self.softmax = nn.LogSoftmax(dim=1)              # 损失函数
        self.init_params()                          # 初始化参数

    def forward(self, x):
        """
        Args:
            x: (batch_size, seq_len), sequence of tokens generated by generator
        """
        emb = self.emb(x)                               #(batch_size, seq_len, emb_dim)
        h0 = self.init_hidden(x.size(0))                #(1, batch，n_items)
        output, h = self.gru(emb, h0)
        pred = self.softmax(self.lin(h.contiguous().view(-1, self.hidden_dim)))
        return pred                                     #(batch_size, n_items)

    def step(self, x, h, c):
        """
        Args:
            x: (batch_size,  1), sequence of tokens generated by generator
            h: (1, batch_size, hidden_dim), lstm hidden state
            c: (1, batch_size, hidden_dim), lstm cell state
        """
        emb = self.emb(x)
        output, (h, c) = self.lstm(emb, (h, c))
        pred = F.softmax(self.lin(output.view(-1, self.hidden_dim)), dim=1)
        return pred, h, c


    def init_hidden(self, batch_size):
        h = Variable(torch.zeros((1, batch_size, self.hidden_dim)))
        c = Variable(torch.zeros((1, batch_size, self.hidden_dim)))
        h, c = h.to(self.device), c.to(self.device)
        return h, c

    def init_params(self):
        for param in self.parameters():
            param.data.uniform_(-0.05, 0.05)

    def sample(self, batch_size, seq_len, x=None):
        res = []
        flag = False # whether sample from zero
        if x is None:
            flag = True
        if flag:
            x = Variable(torch.zeros((batch_size, 1)).long())
        x = x.to(self.device)
        h, c = self.init_hidden(batch_size)
        samples = []
        if flag:
            for i in range(seq_len):
                output, h, c = self.step(x, h, c)
                x = output.multinomial(1)
                samples.append(x)
        else:
            given_len = x.size(1)
            lis = x.chunk(x.size(1), dim=1)
            for i in range(given_len):
                output, h, c = self.step(lis[i], h, c)
                samples.append(lis[i])
            x = output.multinomial(1)
            for i in range(given_len, seq_len):
                samples.append(x)
                output, h, c = self.step(x, h, c)
                x = output.multinomial(1)
        output = torch.cat(samples, dim=1)
        return output
